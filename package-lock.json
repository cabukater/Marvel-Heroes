import { of } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { TestScheduler } from 'rxjs/testing';
import { MyService } from './my-service';

describe('getCharonResponse', () => {
  let httpClientSpy: jasmine.SpyObj<HttpClient>;
  let myService: MyService;
  let testScheduler: TestScheduler;

  beforeEach(() => {
    httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);
    myService = new MyService(httpClientSpy);
    testScheduler = new TestScheduler((actual, expected) => {
      expect(actual).toEqual(expected);
    });
  });

  it('should return an Observable with the expected value', () => {
    // Setup test data
    const relation = 'test-relation';
    const headerParams = [{ key: 'test-header', value: 'test-value' }];
    const endpoint = 'test-endpoint';
    const updatedHeader = { test: 'header' };
    const responseData = { test: 'data' };

    // Set up HttpClient mock to return test data
    httpClientSpy.get.and.returnValue(of(responseData));

    // Set up the test scheduler
    testScheduler.run((helpers) => {
      const { expectObservable } = helpers;

      // Call the method being tested
      const observable$ = myService.getCharonResponse(relation, headerParams);

      // Assert the expected values
      expectObservable(observable$).toBe('(a|)', { a: responseData });
    });

    // Assert that the HttpClient was called with the expected arguments
    expect(httpClientSpy.get).toHaveBeenCalledTimes(1);
    expect(httpClientSpy.get).toHaveBeenCalledWith(endpoint, { headers: updatedHeader });
  });
});
