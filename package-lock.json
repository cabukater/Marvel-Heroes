it('should use map and mergeMap operators correctly', async () => {
    const relation = 'test-relation';
    const headerParams = [{ key: 'test-header', value: 'test-value' }];
    const endpoint = 'test-endpoint';
    const httpResponse = { data: 'test-data' };

    jest.spyOn(myService, 'getCharonEndpoint').mockImplementation(() => {
      return of({ href: endpoint }).pipe(
        map((caronResponseItem) => {
          expect(caronResponseItem).toEqual({ href: endpoint });
          return { href: caronResponseItem.href, updatedHeader: myService.updateHeader() };
        })
      );
    });

    jest.spyOn(myService.HttpClient, 'get').mockImplementation((url, options) => {
      expect(url).toBe(endpoint);
      expect(options).toEqual({ headers: myService.updateHeader() });
      return of(httpResponse);
    });

    const result = await myService.getCharonResponse(relation, headerParams).toPromise();

    expect(myService.getCharonEndpoint).toHaveBeenCalledWith(headerParams);
    expect(myService.HttpClient.get).toHaveBeenCalled();
    expect(result).toEqual(httpResponse);
  });
