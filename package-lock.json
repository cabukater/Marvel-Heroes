import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of } from 'rxjs';
import { AlertComponent } from './alert.component';
import { AlertService } from './alert.service';

class MockAlertService {
  getMsg() {
    return of({
      data: {
        conteudo: '<p>Texto de <a href="http://example.com">exemplo</a>.</p>',
      },
    });
  }
}

describe('AlertComponent', () => {
  let component: AlertComponent;
  let fixture: ComponentFixture<AlertComponent>;
  let mockAlertService: MockAlertService;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [AlertComponent],
      providers: [{ provide: AlertService, useClass: MockAlertService }],
    }).compileComponents();

    mockAlertService = TestBed.inject(AlertService) as any;
    fixture = TestBed.createComponent(AlertComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should get alert message on initialization', () => {
    spyOn(mockAlertService, 'getMsg').and.callThrough();
    component.ngOnInit();
    expect(mockAlertService.getMsg).toHaveBeenCalled();
  });

  it('should insert inner HTML correctly', () => {
    const msg = {
      data: {
        conteudo: '<p>Texto de <a href="http://example.com">exemplo</a>.</p>',
      },
    };
    component.insertInnerHtml(msg);
    expect(component.dinamicContent).toContain('Texto de');
    expect(component.dinamicContent).toContain('exemplo');
  });

  it('should insert inner HTML with multiple paragraphs', () => {
    const msg = {
      data: {
        conteudo: '<p>Par치grafo 1 <a href="http://example.com">exemplo</a>.</p><p>Par치grafo 2.</p>',
      },
    };
    component.insertInnerHtml(msg);
    expect(component.dinamicContent).toContain('Par치grafo 1');
    expect(component.dinamicContent).toContain('exemplo');
    expect(component.dinamicContent).toContain('Par치grafo 2');
  });

  it('should insert inner HTML without link', () => {
    const msg = {
      data: {
        conteudo: '<p>Texto sem link.</p>',
      },
    };
    component.insertInnerHtml(msg);
    expect(component.dinamicContent).toContain('Texto sem link');
  });
});
