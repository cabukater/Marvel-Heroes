import { of } from 'rxjs';
import { HttpHeaders } from '@angular/common/http';
import { TestScheduler } from 'rxjs/testing';
import { MyService } from './my-service';

describe('getCharonResponse', () => {
  let myService: MyService;
  let testScheduler: TestScheduler;

  beforeEach(() => {
    myService = new MyService();
    testScheduler = new TestScheduler((actual, expected) => {
      expect(actual).toEqual(expected);
    });
  });

  it('should call HttpClient.get with the endpoint and updated headers', () => {
    // Setup test data
    const relation = 'test-relation';
    const headerParams = [{ key: 'test-header', value: 'test-value' }];
    const endpoint = 'test-endpoint';
    const updatedHeader = new HttpHeaders();

    // Set up getCaronEnpoint to return a test endpoint
    spyOn(myService, 'getCaronEnpoint').and.returnValue(of({ href: endpoint, updatedHeader }));

    // Set up HttpClient.get mock to return a dummy response
    spyOn(myService.HttpClient, 'get').and.returnValue(of({}));

    // Call the method being tested
    myService.getCharonResponse(relation, headerParams).subscribe();

    // Assert that HttpClient.get was called with the expected arguments
    expect(myService.HttpClient.get).toHaveBeenCalledTimes(1);
    expect(myService.HttpClient.get).toHaveBeenCalledWith(endpoint, { headers: updatedHeader });
  });
});
