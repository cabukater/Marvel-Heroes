import { AlertComponent } from './AlertComponent';

describe('AlertComponent', () => {
  describe('insertInnerHtml', () => {
    test('should update the DOM with the content of the message', () => {
      const component = new AlertComponent();
      const msg = {
        data: {
          conteudo: '<p>Hello World</p><a href="http://example.com">Example</a>',
        },
      };

      component.insertInnerHtml(msg);

      expect(component.dinamicContent).toEqual(
        '<span>Hello World</span><a href="http://example.com" target="_blank" aria-describedby="alert-text" rel="external">Example</a>'
      );
    });

    test('should handle messages with no paragraphs', () => {
      const component = new AlertComponent();
      const msg = {
        data: {
          conteudo: '<a href="http://example.com">Example</a>',
        },
      };

      component.insertInnerHtml(msg);

      expect(component.dinamicContent).toEqual(
        '<a href="http://example.com" target="_blank" aria-describedby="alert-text" rel="external">Example</a>'
      );
    });

    test('should handle messages with no links', () => {
      const component = new AlertComponent();
      const msg = {
        data: {
          conteudo: '<p>Hello World</p>',
        },
      };

      component.insertInnerHtml(msg);

      expect(component.dinamicContent).toEqual('<span>Hello World</span>');
    });

    test('should handle messages with empty content', () => {
      const component = new AlertComponent();
      const msg = {
        data: {
          conteudo: '',
        },
      };

      component.insertInnerHtml(msg);

      expect(component.dinamicContent).toEqual('');
    });

    test('should handle messages with invalid HTML', () => {
      const component = new AlertComponent();
      const msg = {
        data: {
          conteudo: '<p>Hello World',
        },
      };

      component.insertInnerHtml(msg);

      expect(component.dinamicContent).toEqual('<p>Hello World</p>');
    });

    test('should handle messages with no data', () => {
      const component = new AlertComponent();
      const msg = null;

      component.insertInnerHtml(msg);

      expect(component.dinamicContent).toEqual('');
    });

    test('should handle messages with null content', () => {
      const component = new AlertComponent();
      const msg = {
        data: {
          conteudo: null,
        },
      };

      component.insertInnerHtml(msg);

      expect(component.dinamicContent).toEqual('');
    });

    test('should handle messages with undefined content', () => {
      const component = new AlertComponent();
      const msg = {
        data: {
          conteudo: undefined,
        },
      };

      component.insertInnerHtml(msg);

      expect(component.dinamicContent).toEqual('');
    });
  });
});

