@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Raleway:ital,wght@0,100;0,200;0,300;0,800;0,900;1,200;1,800;1,900&display=swap');

* {
  padding: 0;
  margin: 0;
}

html, body {
  width: 100vw;
  min-height: 100vh;
  margin: 0;
  padding: 0;
  background-color: #282c34;
  color: var(--light);
  font-family: Arial, Helvetica, sans-serif;
  box-sizing: border-box;
  line-height: 1.4;
}
.App {
  text-align: center;
  background-color: #282c34;
  height: 100vh;
  display: flex;
  width: 100vw;
  flex-direction: column;
  background-image: url('../src/assets/images/pattern.jpg');
  background-position: center;
  background-size: cover;
  
}

.stage{
   flex: 2;
   width: 100vw;
}

.list-cards{
  flex: 1;
  width: 100vw;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
oo



function transformContentHtml(contentHtml: string): string {
  const parser = new DOMParser();
  const doc = parser.parseFromString(contentHtml, 'text/html');

  // Encontra todos os elementos <p>
  const paragraphs = doc.getElementsByTagName('p');

  // Verifica se h√° algum elemento <a> no documento
  const linkExists = doc.querySelector('a') !== null;
  if (!linkExists) {
    return doc.body.innerHTML;
  }

  for (let i = 0; i < paragraphs.length; i++) {
    const paragraph = paragraphs[i];
    const span = doc.createElement('span');
    span.textContent = paragraph.textContent;
    const link = paragraph.querySelector('a');
    if (link !== null) {
      const newLink = doc.createElement('a');
      newLink.setAttribute('href', link.getAttribute('href'));
      newLink.textContent = link.textContent;
      link.parentNode.replaceChild(newLink, link);
      span.parentNode.insertBefore(link, span.nextSibling);
      span.parentNode.insertBefore(doc.createTextNode(' '), span.nextSibling);
    }
    paragraph.parentNode.replaceChild(span, paragraph);
  }

  return doc.body.innerHTML;
}
